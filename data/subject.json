[
    {
        "id": "6357d91c74292a6f4a366cc1",
        "sub_name": "Algorithm",
        "sub_id": "01",
        "picture": "https://e7.pngegg.com/pngimages/328/186/png-clipart-introduction-to-algorithms-algorithms-design-and-analysis-analysis-of-algorithms-algorithm-design-design-text-development-thumbnail.png",
        "details": "The word Algorithm means ” A set of finite rules or instructions to be followed in calculations or other problem-solving operations ” Or ” A procedure for solving a mathematical problem in a finite number of steps that frequently involves recursive operations”. The Algorithm designed are language-independent, i.e. they are just plain instructions that can be implemented in any language, and yet the output will be the same, as expected. Types of Algorithms: - Brute Force Algorithm - Recursive Algorithm - Backtracking Algorithm - Searching Algorithm - Sorting Algorithm - Hashing Algorithm - Divide and Conquer Algorithm - Greedy Algorithm - Dynamic Programming Algorithm - Randomized Algorithm. n order to write an algorithm, the following things are needed as a pre-requisite: The problem that is to be solved by this algorithm i.e. clear problem definition. - The constraints of the problem must be considered while solving the problem. - The input to be taken to solve the problem. - The output to be expected when the problem is solved. - The solution to this problem, is within the given constraints. An algorithm is defined as complex based on the amount of Space and Time it consumes. Hence the Complexity of an algorithm refers to the measure of the Time that it will need to execute and get the expected output, and the Space it will need to store all the data (input, temporary data and output). Hence these two factors define the efficiency of an algorithm. "
    },
    {
        "id": "6357d91c4900da85f537097d",
        "sub_name": "Data Structure",
        "sub_id": "02",
        "picture": "https://i.ytimg.com/vi/Qmt0QwzEmh0/maxresdefault.jpg",
        "details": "A data structure is a storage that is used to store and organize data. It is a way of arranging data on a computer so that it can be accessed and updated efficiently. In computer science and computer programming, a data structure may be selected or designed to store data for the purpose of using it with various algorithms. In some cases, the algorithm's basic operations are tightly coupled to the data structure's design. Each data structure contains information about the data values, relationships between the data and -- in some cases -- functions that can be applied to the data. In general, data structures are used to implement the physical forms of abstract data types. Data structures are a crucial part of designing efficient software. They also play a critical role in algorithm design and how those algorithms are used within computer programs. Early programming languages -- such as Fortran, C and C++ -- enabled programmers to define their own data structures. Today, many programming languages include an extensive collection of built-in data structures to organize code and information. For example, Python lists and dictionaries, and JavaScript arrays and objects are common coding structures used for storing and retrieving information. Software engineers use algorithms that are tightly coupled with the data structures -- such as lists, queues and mappings from one set of values to another. This approach can be fused in a variety of applications, including managing collections of records in a relational database and creating an index of those records using a data structure called a binary tree."
    },
    {
        "id": "6357d91ce9e31499d6d3973a",
        "sub_name": "Discrete Math",
        "sub_id": "03",
        "picture": "https://c8.alamy.com/zooms/9/9e879e148d8f4e809bd18ceec8693c0f/2h2tght.jpg",
        "details": "Discrete mathematics is the branch of mathematics dealing with objects that can consider only distinct, separated values. This tutorial includes the fundamental concepts of Sets, Relations and Functions, Mathematical Logic, Group theory, Counting Theory, Probability, Mathematical Induction, and Recurrence Relations, Graph Theory, Trees and Boolean Algebra. Though there cannot be a definite number of branches of Discrete Mathematics, the following topics are almost always covered in any study regarding this matter − Sets, Relations and Functions - Mathematical Logic - Group theory - Counting Theory - Probability - Mathematical Induction and Recurrence Relations - Graph Theory - Trees - Boolean Algebra. Set theory forms the basis of several other fields of study like counting theory, relations, graph theory and finite state machines. In this chapter, we will cover the different aspects of Set Theory. A set is an unordered collection of different elements. A set can be written explicitly by listing its elements using set bracket. If the order of the elements is changed or any element of a set is repeated, it does not make any changes in the set."
    },
    {
        "id": "6357d91c8af4fa5e056e7785",
        "sub_name": "Compiler Design",
        "sub_id": "04",
        "picture": "https://media.istockphoto.com/vectors/compiler-concept-icon-software-development-machine-language-data-vector-id1216376755?k=20&m=1216376755&s=612x612&w=0&h=vLQu5J89kmKx0WwbeGUkTI_9zjWhOuG8W1Bol9XNpkw=",
        "details": "The compiler is software that converts a program written in a high-level language (Source Language) to a low-level language (Object/Target/Machine Language/0’s, 1’s). Or, A Compiler is computer software that transforms program source code which is written in a high-level language into low-level machine code. A Compiler is computer software that transforms program source code which is written in a high-level language into low-level machine code. When executing, the compiler first analyzes all the language statements one after the other syntactically and then, if it’s successful, builds the output code, making sure that statements that refer to other statements are referred to appropriately, Traditionally, the output code is called Object Code. Types of Compiler: - Cross Compiler: This enables the creation of code for a platform other than the one on which the compiler is running. For instance, it runs on a machine ‘A’ and produces code for another machine ‘B’ - Source-to-source Compiler: This can be referred to as a transcompiler or transpiler and it is a compiler that translates source code written in one programming language into source code of another programming language. - Single Pass Compiler: This directly transforms source code into machine code. For instance, Pascal programming language. - Two-Pass Compiler: This goes through the code to be translated twice; on the first pass it checks the syntax of statements and constructs a table of symbols, while on the second pass it actually translates program statements into machine language. - Multi-Pass Compiler: This is a type of compiler that processes the source code or abstract syntax tree of a program multiple times before translating it to machine language."
    },
    {
        "id": "6357d91ca4d7ae0a209cf5ca",
        "sub_name": "Artificial Intelligence",
        "sub_id": "05",
        "picture": "https://www.eweek.com/wp-content/uploads/2022/05/enterprise-AI.jpg",
        "details": " In some ways, artificial intelligence is the opposite of natural intelligence. If living creatures can be said to be born with natural intelligence, man-made machines can be said to possess artificial intelligence. So from a certain point of view, any (thinking machine) has artificial intelligence. And in fact, one of the early pioneers of AI, John McCarthy, defined artificial intelligence as “the science and engineering of making intelligent machines. Many people trace the history of artificial intelligence back to 1950, when Alan Turing published “Computing Machinery and Intelligence.” Turing’s essay began, “I propose to consider the question, ‘Can machines think?'” It then laid out a scenario that came to be known as a Turing Test. Turing proposed that a computer could be considered intelligent if a person could not distinguish the machine from a human being. In the 1970s and 80s, AI development continued but at a slower pace. The field of robotics in particular saw significant advances, such as robots that could see and walk. And Mercedes-Benz introduced the first (extremely limited) autonomous vehicle. However, government funding for AI research decreased dramatically, leading to a period some refer to as the “AI winter.” "
    },
    {
        "id": "6357d91c9e2fb1a7928244b2",
        "sub_name": "Machine Learning",
        "sub_id": "06",
        "picture": "https://c8.alamy.com/comp/2CH5Y0K/machine-deep-learning-algorithms-and-ai-artificial-intelligence-internet-and-technology-concept-on-virtual-screen-2CH5Y0K.jpg",
        "details": "Machine Learning is the field of study that gives computers the capability to learn without being explicitly programmed. ML is one of the most exciting technologies that one would have ever come across. As it is evident from the name, it gives the computer that makes it more similar to humans: The ability to learn. Machine learning is actively being used today, perhaps in many more places than one would expect. Machine Learning is an essential skill for any aspiring data analyst and data scientist, and also for those who wish to transform a massive amount of raw data into trends and predictions. Learn this skill today with Machine Learning Foundation – Self Paced Course , designed and curated by industry experts having years of expertise in ML and industry-based projects.  Applications of Machine Learning include: - Web Search Engine: One of the reasons why search engines like google, bing etc work so well is because the system has learnt how to rank pages through a complex learning algorithm. - Photo tagging Applications: Be it facebook or any other photo tagging application, the ability to tag friends makes it even more happening. It is all possible because of a face recognition algorithm that runs behind the application. - Spam Detector: Our mail agent like Gmail or Hotmail does a lot of hard work for us in classifying the mails and moving the spam mails to spam folder. This is again achieved by a spam classifier running in the back end of mail application."
    },
    {
        "id": "6357d91c665a0c875fa51b9d",
        "sub_name": "Cryptography",
        "sub_id": "07",
        "picture": "https://caltechsites-prod.s3.amazonaws.com/scienceexchange/images/Cryptography-TintedFeature-Image.width-600.jpg",
        "details": "Cryptography is technique of securing information and communications through use of codes so that only those person for whom the information is intended can understand it and process it. In today’s age of computers cryptography is often associated with the process where an ordinary plain text is converted to cipher text which is the text made such that intended receiver of the text can only decode it and hence this process is known as encryption. The process of conversion of cipher text to plain text this is known as decryption. Types Of Cryptography: - Symmetric Key Cryptography: It is an encryption system where the sender and receiver of message use a single common key to encrypt and decrypt messages. Symmetric Key Systems are faster and simpler but the problem is that sender and receiver have to somehow exchange key in a secure manner. The most popular symmetric key cryptography system is Data Encryption System(DES). - Hash Functions: There is no usage of any key in this algorithm. A hash value with fixed length is calculated as per the plain text which makes it impossible for contents of plain text to be recovered. Many operating systems use hash functions to encrypt passwords. - Asymmetric Key Cryptography: Under this system a pair of keys is used to encrypt and decrypt information. A public key is used for encryption and a private key is used for decryption. Public key and Private Key are different. Even if the public key is known by everyone the intended receiver can only decode it because he alone knows the private key."
    }
]